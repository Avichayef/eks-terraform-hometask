/**
 * Jenkins Pipeline for Flask App CI/CD with Monitoring
 * 
 * Prerequisites Installation and Validation:
 * - AWS CLI
 * - Docker
 * - kubectl
 * - Helm
 * - Required Jenkins plugins
 * 
 * Pipeline Steps:
 * 1. Validate/Install prerequisites
 * 2. Code checkout
 * 3. Run unit tests
 * 4. Build and push Docker image
 * 5. Deploy to EKS with rollback
 * 6. Deploy monitoring stack
 * 7. Configure autoscaling
 */

pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-2'
        AWS_ACCOUNT_ID = '784866907805'
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        ECR_REPO_NAME = 'flask-k8s-demo'
        APP_PATH = 'environments/dev/flask-app'
        AWS_CREDENTIALS = credentials('aws-credentials')
        TERRAFORM_PATH = 'environments/dev'
        K8S_CLUSTER_NAME = 'my-eks'  // Updated from 'my-eks-cluster' to 'my-eks'
        DOCKER_IMAGE = "${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                dir("${APP_PATH}") {
                    script {
                        try {
                            // Add Docker system info check before build
                            sh 'docker info'
                            
                            // Read and validate config.env
                            def configEnv = readFile('config.env').readLines().findAll { line ->
                                line.trim() && !line.startsWith('#')
                            }.collect { line ->
                                def parts = line.split('=', 2)
                                return "${parts[0]}=${parts[1]}"
                            }
                            
                            withEnv(configEnv) {
                                // Clean up any existing images first
                                sh """
                                    docker image prune -f
                                    docker images | grep ${ECR_REPO_NAME} | awk '{print \$3}' | xargs -r docker rmi -f
                                """
                                
                                // Build with detailed output
                                sh """
                                    set -xe  # Enable command tracing and exit on error
                                    
                                    echo "Building image: ${ECR_REPO_NAME}:${BUILD_NUMBER}"
                                    docker build --no-cache \
                                        --progress=plain \
                                        -t ${ECR_REPO_NAME}:${BUILD_NUMBER} . || {
                                            echo "Docker build failed with exit code \$?"
                                            docker logs \$(docker ps -ql) || true
                                            exit 1
                                    }
                                    
                                    echo "Tagging image as: ${DOCKER_IMAGE}"
                                    docker tag ${ECR_REPO_NAME}:${BUILD_NUMBER} ${DOCKER_IMAGE} || {
                                        echo "Docker tag failed with exit code \$?"
                                        exit 1
                                    }
                                    
                                    echo "Verifying image:"
                                    docker images | grep ${ECR_REPO_NAME}
                                """
                            }
                        } catch (Exception e) {
                            echo "Build failed: ${e.getMessage()}"
                            sh '''
                                echo "=== Debug Information ==="
                                docker system info
                                docker ps -a
                                docker images
                                df -h
                                free -m
                            '''
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    dir("${APP_PATH}") {
                        script {
                            sh """
                                aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                                docker push ${DOCKER_IMAGE}
                            """
                        }
                    }
                }
            }
        }

        stage('Configure Kubernetes') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    script {
                        try {
                            // Verify AWS authentication
                            sh 'aws sts get-caller-identity'
                            
                            // Update kubeconfig with retry
                            retry(3) {
                                sh """
                                    aws eks update-kubeconfig \
                                        --name ${K8S_CLUSTER_NAME} \
                                        --region ${AWS_DEFAULT_REGION} \
                                        --alias ${K8S_CLUSTER_NAME}
                                """
                            }
                            
                            // Verify Kubernetes connectivity
                            sh """
                                kubectl config current-context
                                kubectl cluster-info
                                kubectl get nodes
                            """
                        } catch (Exception e) {
                            echo "Kubernetes configuration failed: ${e.getMessage()}"
                            sh '''
                                echo "=== Debug Information ==="
                                aws eks list-clusters
                                kubectl config view
                                aws sts get-caller-identity
                            '''
                            throw e
                        }
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    dir("${APP_PATH}") {
                        script {
                            try {
                                // Verify authentication before deployment
                                sh """
                                    kubectl config use-context ${K8S_CLUSTER_NAME}
                                    kubectl get namespace default
                                    
                                    # Apply deployment with detailed output
                                    kubectl apply -f k8s-deployment.yaml --record
                                    
                                    # Update image and wait for rollout
                                    kubectl set image deployment/flask-app flask-app=${DOCKER_IMAGE} --record
                                    kubectl rollout status deployment/flask-app --timeout=300s
                                """
                            } catch (Exception e) {
                                echo "Deployment failed: ${e.getMessage()}"
                                sh '''
                                    echo "=== Deployment Debug Info ==="
                                    kubectl get events --sort-by=.metadata.creationTimestamp
                                    kubectl get pods -o wide
                                    kubectl describe deployment flask-app
                                '''
                                sh 'kubectl rollout undo deployment/flask-app || true'
                                throw e
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        failure {
            script {
                sh '''
                    echo "=== Debug Information ==="
                    echo "AWS Identity:"
                    aws sts get-caller-identity || true
                    
                    echo "Kubernetes Context:"
                    kubectl config current-context || true
                    
                    echo "Kubernetes Namespaces:"
                    kubectl get namespaces || true
                    
                    echo "Pod Status:"
                    kubectl get pods || true
                    
                    echo "Deployment Status:"
                    kubectl describe deployment flask-app || true
                '''
            }
            echo 'Pipeline failed! Check logs for details'
        }
        success {
            echo 'Deployment completed successfully!'
        }
    }
}
