/**
 * Jenkins Pipeline for Flask App CI/CD with Monitoring
 * 
 * Prerequisites Installation and Validation:
 * - AWS CLI
 * - Docker
 * - kubectl
 * - Helm
 * - Required Jenkins plugins
 * 
 * Pipeline Steps:
 * 1. Validate/Install prerequisites
 * 2. Code checkout
 * 3. Run unit tests
 * 4. Build and push Docker image
 * 5. Deploy to EKS with rollback
 * 6. Deploy monitoring stack
 * 7. Configure autoscaling
 */

pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-2'
        ECR_REPO = '784866907805.dkr.ecr.us-east-2.amazonaws.com'
        APP_PATH = 'environments/dev/flask-app'
        MONITORING_PATH = 'environments/dev/monitoring'
        AWS_CREDENTIALS = credentials('aws-credentials')
        TERRAFORM_PATH = 'environments/dev'
        K8S_CLUSTER_NAME = 'my-eks-cluster' // Update this with your actual cluster name
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                dir("${APP_PATH}") {
                    script {
                        def configEnv = readFile('config.env').readLines().findAll { line ->
                            line.trim() && !line.startsWith('#')
                        }.collect { line ->
                            def parts = line.split('=', 2)
                            return "${parts[0]}=${parts[1]}"
                        }
                        
                        withEnv(configEnv) {
                            sh 'docker build -t ${ECR_REPO_NAME}:${BUILD_NUMBER} .'
                        }
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    dir("${APP_PATH}") {
                        script {
                            def configEnv = readFile('config.env').readLines().findAll { line ->
                                line.trim() && !line.startsWith('#')
                            }.collect { line ->
                                def parts = line.split('=', 2)
                                return "${parts[0]}=${parts[1]}"
                            }
                            
                            withEnv(configEnv) {
                                sh '''
                                    # Create ECR repository if it doesn't exist
                                    aws ecr describe-repositories --repository-names ${ECR_REPO_NAME} || \
                                    aws ecr create-repository --repository-name ${ECR_REPO_NAME}
                                    
                                    # Login to ECR
                                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                                    
                                    # Tag and push the image
                                    docker tag ${ECR_REPO_NAME}:${BUILD_NUMBER} ${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}
                                    docker push ${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Configure Kubernetes') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    sh '''
                        # Update kubeconfig
                        aws eks update-kubeconfig --name ${K8S_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
                        
                        # Verify connection
                        kubectl cluster-info
                        kubectl get nodes
                    '''
                }
            }
        }

        stage('Terraform Init and Import') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    withCredentials([file(credentialsId: 'eks-kubeconfig', variable: 'KUBECONFIG')]) {
                        dir("${TERRAFORM_PATH}") {
                            sh '''
                                set +e  # Continue on errors
                                
                                # Initialize Terraform
                                terraform init
                                
                                # Import existing resources
                                terraform import module.monitoring.helm_release.prometheus monitoring/prometheus || true
                                terraform import 'module.monitoring.kubernetes_config_map_v1.cloudwatch_agent[0]' monitoring/cloudwatch-agent-config || true
                                
                                # Run Terraform plan
                                terraform plan -out=tfplan
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    withCredentials([file(credentialsId: 'eks-kubeconfig', variable: 'KUBECONFIG')]) {
                        dir("${TERRAFORM_PATH}") {
                            sh '''
                                set -xe
                                terraform apply -auto-approve tfplan
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                withCredentials([file(credentialsId: 'eks-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir("${APP_PATH}") {
                        script {
                            def configEnv = readFile('config.env').readLines().findAll { line ->
                                line.trim() && !line.startsWith('#')
                            }.collect { line ->
                                def parts = line.split('=', 2)
                                return "${parts[0]}=${parts[1]}"
                            }
                            
                            withEnv(configEnv) {
                                sh '''
                                    kubectl apply -f k8s-deployment.yaml
                                    kubectl set image deployment/${K8S_APP_NAME} ${K8S_APP_NAME}=${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Monitoring Stack') {
            steps {
                withCredentials([file(credentialsId: 'eks-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir("${MONITORING_PATH}") {
                        sh '''
                            # Add Helm repos
                            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                            helm repo add grafana https://grafana.github.io/helm-charts
                            helm repo update

                            # Deploy monitoring stack
                            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Deploy Prometheus stack with values from terraform.tfvars
                            GRAFANA_PASSWORD=$(grep 'grafana_admin_password' ../*.tfvars | cut -d '=' -f2 | tr -d ' "')
                            helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
                                --namespace monitoring \
                                --set grafana.adminPassword=$GRAFANA_PASSWORD \
                                -f prometheus-values.yaml

                            # Deploy CloudWatch agent
                            kubectl create namespace amazon-cloudwatch --dry-run=client -o yaml | kubectl apply -f -
                            kubectl apply -f cloudwatch-agent-config.yaml

                            # Verify deployments
                            kubectl rollout status deployment/prometheus-grafana -n monitoring
                            kubectl rollout status statefulset/prometheus-prometheus-kube-prometheus-prometheus -n monitoring
                        '''
                    }
                }
            }
        }

        stage('Configure Autoscaling') {
            steps {
                withCredentials([file(credentialsId: 'eks-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir("${APP_PATH}") {
                        sh '''
                            kubectl apply -f hpa.yaml
                            kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        failure {
            script {
                sh '''
                    echo "=== Debug Information ==="
                    echo "AWS Identity:"
                    aws sts get-caller-identity || true
                    
                    echo "Kubernetes Context:"
                    kubectl config current-context || true
                    
                    echo "Kubernetes Namespaces:"
                    kubectl get namespaces || true
                    
                    echo "Terraform State:"
                    terraform state list || true
                    
                    echo "Directory Contents:"
                    ls -la
                '''
            }
            echo 'Pipeline failed! Check logs for details'
        }
        success {
            echo 'Deployment and monitoring setup completed successfully!'
        }
    }
}
