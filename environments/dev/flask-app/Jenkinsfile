/**
 * Jenkins Pipeline for Flask App CI/CD
 * 
 * Prerequisites Installation and Validation:
 * - AWS CLI
 * - Docker
 * - kubectl
 * - Required Jenkins plugins
 * 
 * Pipeline Steps:
 * 1. Validate/Install prerequisites
 * 2. Code checkout
 * 3. Run unit tests
 * 4. Build and push Docker image
 * 5. Deploy to EKS with rollback
 */

pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-2'
        ECR_REPO = '784866907805.dkr.ecr.us-east-2.amazonaws.com'
        IMAGE_NAME = 'flask-app'
        APP_PATH = 'environments/dev/flask-app'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                dir("${APP_PATH}") {
                    sh 'ls -la'
                    sh 'pwd'
                    sh 'docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .'
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                withCredentials([[$class: 'AWSCredentialsBinding',
                    credentialsId: 'aws-credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh '''
                        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${ECR_REPO}
                        docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${ECR_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
                        docker push ${ECR_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                withCredentials([file(credentialsId: 'eks-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir("${APP_PATH}") {
                        sh '''
                            kubectl apply -f k8s/
                            kubectl set image deployment/flask-app flask-app=${ECR_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
