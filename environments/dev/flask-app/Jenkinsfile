/**
 * Jenkins Pipeline for Flask App CI/CD with Monitoring
 * 
 * Prerequisites Installation and Validation:
 * - AWS CLI
 * - Docker
 * - kubectl
 * - Helm
 * - Required Jenkins plugins
 * 
 * Pipeline Steps:
 * 1. Validate/Install prerequisites
 * 2. Code checkout
 * 3. Run unit tests
 * 4. Build and push Docker image
 * 5. Deploy to EKS with rollback
 * 6. Deploy monitoring stack
 * 7. Configure autoscaling
 */

pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-2'
        AWS_ACCOUNT_ID = '784866907805'
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        ECR_REPO_NAME = 'flask-k8s-demo'
        APP_PATH = 'environments/dev/flask-app'
        AWS_CREDENTIALS = credentials('aws-credentials')
        TERRAFORM_PATH = 'environments/dev'
        K8S_CLUSTER_NAME = 'my-eks-cluster'
        DOCKER_IMAGE = "${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                dir("${APP_PATH}") {
                    script {
                        def configEnv = readFile('config.env').readLines().findAll { line ->
                            line.trim() && !line.startsWith('#')
                        }.collect { line ->
                            def parts = line.split('=', 2)
                            return "${parts[0]}=${parts[1]}"
                        }
                        
                        withEnv(configEnv) {
                            sh """
                                docker build -t ${ECR_REPO_NAME}:${BUILD_NUMBER} .
                                docker tag ${ECR_REPO_NAME}:${BUILD_NUMBER} ${DOCKER_IMAGE}
                            """
                        }
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    dir("${APP_PATH}") {
                        script {
                            sh """
                                aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                                docker push ${DOCKER_IMAGE}
                            """
                        }
                    }
                }
            }
        }

        stage('Configure Kubernetes') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    sh """
                        aws eks update-kubeconfig --name ${K8S_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
                        kubectl config use-context arn:aws:eks:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:cluster/${K8S_CLUSTER_NAME}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                dir("${APP_PATH}") {
                    script {
                        try {
                            sh """
                                kubectl apply -f k8s-deployment.yaml
                                kubectl set image deployment/flask-app flask-app=${DOCKER_IMAGE}
                                kubectl rollout status deployment/flask-app
                            """
                        } catch (Exception e) {
                            echo "Deployment failed: ${e.getMessage()}"
                            sh 'kubectl rollout undo deployment/flask-app || true'
                            throw e
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        failure {
            script {
                sh '''
                    echo "=== Debug Information ==="
                    echo "AWS Identity:"
                    aws sts get-caller-identity || true
                    
                    echo "Kubernetes Context:"
                    kubectl config current-context || true
                    
                    echo "Kubernetes Namespaces:"
                    kubectl get namespaces || true
                    
                    echo "Pod Status:"
                    kubectl get pods || true
                    
                    echo "Deployment Status:"
                    kubectl describe deployment flask-app || true
                '''
            }
            echo 'Pipeline failed! Check logs for details'
        }
        success {
            echo 'Deployment completed successfully!'
        }
    }
}
