/**
 * Jenkins Pipeline for Flask App CI/CD
 * 
 * Prerequisites Installation and Validation:
 * - AWS CLI
 * - Docker
 * - kubectl
 * - Required Jenkins plugins
 * 
 * Pipeline Steps:
 * 1. Validate/Install prerequisites
 * 2. Code checkout
 * 3. Run unit tests
 * 4. Build and push Docker image
 * 5. Deploy to EKS with rollback
 */

pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-2'
        ECR_REPO = '784866907805.dkr.ecr.us-east-2.amazonaws.com'
        APP_PATH = 'environments/dev/flask-app'
        AWS_CREDENTIALS = credentials('aws-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                dir("${APP_PATH}") {
                    script {
                        def configEnv = readFile('config.env').readLines().findAll { line ->
                            line.trim() && !line.startsWith('#')
                        }.collect { line ->
                            def parts = line.split('=', 2)
                            return "${parts[0]}=${parts[1]}"
                        }
                        
                        withEnv(configEnv) {
                            sh 'docker build -t ${ECR_REPO_NAME}:${BUILD_NUMBER} .'
                        }
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_DEFAULT_REGION) {
                    dir("${APP_PATH}") {
                        script {
                            def configEnv = readFile('config.env').readLines().findAll { line ->
                                line.trim() && !line.startsWith('#')
                            }.collect { line ->
                                def parts = line.split('=', 2)
                                return "${parts[0]}=${parts[1]}"
                            }
                            
                            withEnv(configEnv) {
                                sh '''
                                    # Create ECR repository if it doesn't exist
                                    aws ecr describe-repositories --repository-names ${ECR_REPO_NAME} || \
                                    aws ecr create-repository --repository-name ${ECR_REPO_NAME}
                                    
                                    # Login to ECR
                                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                                    
                                    # Tag and push the image
                                    docker tag ${ECR_REPO_NAME}:${BUILD_NUMBER} ${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}
                                    docker push ${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}
                                '''
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                withCredentials([file(credentialsId: 'eks-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir("${APP_PATH}") {
                        script {
                            def configEnv = readFile('config.env').readLines().findAll { line ->
                                line.trim() && !line.startsWith('#')
                            }.collect { line ->
                                def parts = line.split('=', 2)
                                return "${parts[0]}=${parts[1]}"
                            }
                            
                            withEnv(configEnv) {
                                sh '''
                                    kubectl apply -f k8s/
                                    kubectl set image deployment/${K8S_APP_NAME} ${K8S_APP_NAME}=${ECR_REPO}/${ECR_REPO_NAME}:${BUILD_NUMBER}
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
